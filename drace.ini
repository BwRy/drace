; function names for windows
[sync]
; exclusive mutex lock
acquire_excl=_Mtx_lock               ;Regular Mutexes
acquire_excl=AcquireSRWLockExclusive ;Slim Reader/Writer Locks Exclusive Mode
acquire_excl=GlobalLock              ;

acquire_excl_try=_Mtx_trylock

acquire_rec=EnterCriticalSection

acquire_shared=AcquireSRWLockShared  ; Reader/Writer lock

wait_for_single_object=waitForSingleObject
wait_for_single_object=waitForSingleObjectEx
wait_for_multiple_objects=waitForMultipleObjects
wait_for_multiple_objects=waitForMultipleObjectsEx

; exclusive mutex unlock
release_excl=_Mtx_unlock
release_excl=ReleaseSRWLockExclusive
release_excl=GlobalUnlock

release_rec=LeaveCriticalSection

release_shared=ReleaseSRWLockShared ; Reader/Writer lock

[qtsync]
; Qt Mutexes
acquire_excl=QMutex::lock
acquire_excl_try=QMutex::tryLock
acquire_excl_try=QMutex::try_lock
acquire_excl_try=QMutex::try_lock_for
acquire_excl_try=QMutex::try_lock_until

; RW locks in W Mode
acquire_excl=QReadWriteLock::lockForWrite
acquire_excl_try=QReadWriteLock::tryLockForWrite

acquire_shared=QReadWriteLock::lockForRead
acquire_shared_try=QReadWriteLock::tryLockForRead


release_excl=QMutex::unlock
release_excl=QReadWriteLock::unlock


[functions]
allocators=HeapAlloc
deallocators=HeapFree

; This function return is synchronized with the begin of a new tread
; \ref Multicore Software, p.230
; TODO: Lookup item in C++ std
thread_starters=std::thread::thread<*>
thread_starters_sys=CreateThread

; Disable the race detector during these functions
;exclude=std::thread::join
;exclude=std::thread::*
;exclude=Cnd_do_broadcast*      ; Thread exit
;exclude=__security_init_cookie ; Canary for stack protection
;exclude=__isa_available_init   ; C runtime
;exclude=__scrt_initialize_*    ; |
;exclude=__scrt_acquire_startup*; C thread start lock
;exclude=__scrt_release_startup*; C thread start unlock
;exclude=__scrt_is_managed_app
;exclude=pre_cpp_initialization
;exclude=printf                 ; Ignore Races on stdio // TODO: Use Flag
;exclude=atexit

;exclude=QBasicMutex*
;exclude=TimeVar*
;exclude=ManagerTimedFunction*

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;; QT STUFF ;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; exclude all QT mutexes as they are more "high-level" than native mutexes
; This means that no races inside the mutex functions are reported.
; The mutex events itself are not affected
exclude=QMutex::*
exclude=QReadWriteLock::*

; Locking between processes, assume implementation is race-free
exclude=QLockFile::*

exclude=QSemaphore* ; Assume that this is well-tested and race-free
exclude=QCoreApplication::postEvent ; Qt Events
exclude=QElapsedTimer ; Qt timer

;exclude=RTNGStopTimer ; Do not exclude this, as it might break timer
exclude=Allocator::alloc              ; Custom allocator TODO: Add support for custom alloc
exclude=Allocator::dealloc            ; Custom allocator TODO: Add support for custom alloc
exclude=SimpleStorage::resizeStorage  ; Custom allocator
exclude=SimpleStorage::clearStorage   ; Custom allocator

exclude=*Var::clone ; Cloning of variables, TODO: validate @Matous

[functions_dotnet]
;exclude=MetaDataGetDispenser
exclude=DestroyThread
exclude=GetCurrentThreadTypeNT5
exclude=ThreadSuspend::UnlockThreadStore
exclude=SString::Resize
exclude=TableFreeSingleHandleToCache

; locks are propagated to system, only disable analysis in these functions
;exclude=DeadlockAwareLock::TryBeginEnterLock
;exclude=ListLockEntry::FinishDeadlockAwareEnter

[modules]
exclude_mods=ucrtbase.dll
exclude_mods=tmmon64.dll
exclude_mods=ntdll.dll
exclude_mods=MSVCP140.dll
exclude_mods=TmUmEvt64.dll
exclude_mods=KERNELBASE.dll
exclude_mods=ADVAPI32.dll
exclude_mods=msvcrt.dll
exclude_mods=compbase.dll

; .NET
exclude_mods=CLRJIT.dll
exclude_mods=System.Private.CoreLib.dll

; temporary excludes
exclude_mods=libWCCILmanager.dll ; ManagerTimedFunction::isStoping
exclude_mods=RTNGFoundation.dll ; Timer stuff that cannot be excluded otherwise

exclude_path=c:\windows\system32
exclude_path=c:\windows\microsoft.net
exclude_path=c:\windows\winsxs
